return{}
-- return {
-- 	{
-- 		"mfussenegger/nvim-jdtls",
-- 		ft = { "java" },
-- 		config = function()
-- 			local java_installs_dir = "C:/Lenguages_OS/Java"
-- 			local java17_dir = java_installs_dir .. "/Java17/jdk-17.0.8.1+1"
-- 			local java11_dir = java_installs_dir .. "/Java11/"
-- 			local java8_dir = java_installs_dir .. "/Java8/jdk1.8.0_382"
-- 			local home = os.getenv("HOME")
-- 			local jdtls = require("jdtls")
-- 			local jdtls_path = require("mason-registry").get_package("jdtls"):get_install_path()
-- 			local dap_path = require("mason-registry").get_package("java-debug-adapter"):get_install_path() .. "/extension/server"
-- 			local test_path = require("mason-registry").get_package("java-test"):get_install_path() .. "/extension/server"
-- 			local root_markers = { "gradlew", "mvnw", ".git" }
-- 			local root_dir = require("jdtls.setup").find_root(root_markers)
-- 			local workspace_folder = home .. "/.local/share/eclipse/" .. vim.fn.fnamemodify(root_dir, ":p:h:t")

-- 			function nnoremap(rhs, lhs, bufopts, desc)
-- 				bufopts.desc = desc
-- 				vim.keymap.set("n", rhs, lhs, bufopts)
-- 			end

-- 			-- Use an on_attach function to only map the following keys
-- 			-- after the language server attaches to the current buffer
-- 			local on_attach = function(client, bufnr)
-- 				jdtls.setup_dap({ hotcodereplace = "auto" })
-- 				jdtls.setup.add_commands()

-- 				local bufopts = { noremap = true, silent = true, buffer = bufnr }
-- 				nnoremap("<C-k>", vim.lsp.buf.signature_help, bufopts, "Show signature")
-- 				nnoremap("<space>wa", vim.lsp.buf.add_workspace_folder, bufopts, "Add workspace folder")
-- 				nnoremap("<space>wr", vim.lsp.buf.remove_workspace_folder, bufopts, "Remove workspace folder")
-- 				nnoremap("<space>wl", function()
-- 					print(vim.inspect(vim.lsp.buf.list_workspace_folders()))
-- 				end, bufopts, "List workspace folders")
-- 				nnoremap("<space>D", vim.lsp.buf.type_definition, bufopts, "Go to type definition")
-- 				vim.keymap.set(
-- 					"v",
-- 					"<space>ca",
-- 					"<ESC><CMD>lua vim.lsp.buf.range_code_action()<CR>",
-- 					{ noremap = true, silent = true, buffer = bufnr, desc = "Code actions" }
-- 				)
-- 				nnoremap("<space>f", function()
-- 					vim.lsp.buf.format({ async = true })
-- 				end, bufopts, "Format file")

-- 				-- Java extensions provided by jdtls
-- 				nnoremap("<C-o>", jdtls.organize_imports, bufopts, "Organize imports")
-- 				nnoremap("<space>ev", jdtls.extract_variable, bufopts, "Extract variable")
-- 				nnoremap("<space>ec", jdtls.extract_constant, bufopts, "Extract constant")
-- 				vim.keymap.set(
-- 					"v",
-- 					"<space>em",
-- 					[[<ESC><CMD>lua require('jdtls').extract_method(true)<CR>]],
-- 					{ noremap = true, silent = true, buffer = bufnr, desc = "Extract method" }
-- 				)
-- 			end

-- 			local bundles = {
-- 				vim.fn.glob( dap_path .. "/com.microsoft.java.debug.plugin-*.jar"),
-- 			}
-- 			vim.list_extend(bundles, vim.split(vim.fn.glob(test_path .. "/*.jar"), "\n"))

-- 			local capabilities = vim.lsp.protocol.make_client_capabilities()
-- 			capabilities = require("cmp_nvim_lsp").default_capabilities(capabilities)

-- 			local config = {
-- 				flags = {
-- 					debounce_text_changes = 80,
-- 				},
-- 				capabilities = capabilities,
-- 				on_attach = on_attach,
-- 				init_options = {
-- 					bundles = bundles,
-- 				},
-- 				root_dir = root_dir,
-- 				settings = {
-- 					java = {
-- 						format = {
-- 							settings = {
-- 								url = jdtls_path .. "/eclipse-java-google-style.xml",
-- 								profile = "GoogleStyle",
-- 							},
-- 						},
-- 						signatureHelp = { enabled = true },
-- 						contentProvider = { preferred = "fernflower" },
-- 						completion = {
-- 							favoriteStaticMembers = {
-- 								"org.hamcrest.MatcherAssert.assertThat",
-- 								"org.hamcrest.Matchers.*",
-- 								"org.hamcrest.CoreMatchers.*",
-- 								"org.junit.jupiter.api.Assertions.*",
-- 								"java.util.Objects.requireNonNull",
-- 								"java.util.Objects.requireNonNullElse",
-- 								"org.mockito.Mockito.*",
-- 							},
-- 							filteredTypes = {
-- 								"com.sun.*",
-- 								"io.micrometer.shaded.*",
-- 								"java.awt.*",
-- 								"jdk.*",
-- 								"sun.*",
-- 							},
-- 						},
-- 						sources = {
-- 							organizeImports = {
-- 								starThreshold = 9999,
-- 								staticStarThreshold = 9999,
-- 							},
-- 						},
-- 						codeGeneration = {
-- 							toString = {
-- 								template = "${object.className}{${member.name()}=${member.value}, ${otherMembers}}",
-- 							},
-- 							hashCodeEquals = {
-- 								useJava7Objects = true,
-- 							},
-- 							useBlocks = true,
-- 						},
-- 						configuration = {
-- 							runtimes = {
-- 								{
-- 									name = "JavaSE-17",
-- 									path = java17_dir
-- 								},
-- 								{
-- 									name = "JavaSE-11",
-- 									path = java11_dir
-- 								},
-- 								{
-- 									name = "JavaSE-1.8",
-- 									path = java8_dir,
-- 								},
-- 							},
-- 						},
-- 					},
-- 				},
-- 				cmd = {
-- 					-- home .. "/.asdf/installs/java/corretto-17.0.4.9.1/bin/java",
-- 					java17_dir .. "/bin/java",
-- 					-- "java",
-- 					"-Declipse.application=org.eclipse.jdt.ls.core.id1",
-- 					"-Dosgi.bundles.defaultStartLevel=4",
-- 					"-Declipse.product=org.eclipse.jdt.ls.core.product",
-- 					"-Dlog.protocol=true",
-- 					"-Dlog.level=ALL",
-- 					"-Xmx4g",
-- 					"--add-modules=ALL-SYSTEM",
-- 					"--add-opens",
-- 					"java.base/java.util=ALL-UNNAMED",
-- 					"--add-opens",
-- 					"java.base/java.lang=ALL-UNNAMED",
-- 					"-javaagent:", jdtls_path .. "/lombok.jar",
-- 					"-jar",
-- 					vim.fn.glob(jdtls_path .. "/plugins/org.eclipse.equinox.launcher_*.jar"),
-- 					"-configuration", jdtls_path .. "/config_win",
-- 					"-data", workspace_folder,
-- 				},
-- 			}
-- 			jdtls.start_or_attach(config)
-- 		end,
-- 	},
-- }
